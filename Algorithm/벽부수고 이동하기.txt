2206 벽 부수고 이동하기

N×M의 행렬로 표현되는 맵이 있다. 맵에서 0은 이동할 수 있는 곳을 나타내고, 1은 이동할 수 없는 벽이 있는 곳을 나타낸다. 당신은 (1, 1)에서 (N, M)의 위치까지 이동하려 하는데, 이때 최단 경로로 이동하려 한다. 최단경로는 맵에서 가장 적은 개수의 칸을 지나는 경로를 말하는데, 이때 시작하는 칸과 끝나는 칸도 포함해서 센다.
만약에 이동하는 도중에 한 개의 벽을 부수고 이동하는 것이 좀 더 경로가 짧아진다면, 
벽을 한 개 까지 부수고 이동하여도 된다. (벽은 단 한번만 부실 수 있음)
한 칸에서 이동할 수 있는 칸은 상하좌우로 인접한 칸이다.
맵이 주어졌을 때, 최단 경로를 구해 내는 프로그램을 작성하시오.
첫째 줄에 최단 거리를 출력한다. 불가능할 때는 -1을 출력한다.


import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;

public class Main {
	static class Place {
		int y;
		int x;
		int dis; //이동거리
		int drill; //공사횟수

		public Place(int y, int x, int dis, int drill){
			this.y = y;
			this.x = x;
			this.dis = dis;
			this.drill = drill;
		}
	}

	static int N, M, ans;
	static int[][] map, visit;

	static int[] dy = {-1, 1, 0, 0}; //상하좌우
	static int[] dx = {0, 0, -1, 1};

	public static void main(String[] args){
		
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String[] str = br.readLine().split(" ");

		N = Integer.parseInt(str[0]); //행
		M = Integer.parseInt(str[1]); //열

		map = new int[N][M] //초기화
		visit = new int[N][M] //초기화

		for (int i = 0; i < N; i++){
			str = br.readLine().split("");
			for (int j = 0; j < M; j++){
				map[i][j] = Integer.parseInt(str[j]);
				visit[i][j] = Integer.MAX_VALUE; //무한대로 초기화
			}
		}

		ans = Integer.MAX_VALUE;

		bfs(0,0); //출발점에서 bfs 시작

		if ( ans == Integer.MAX_VALUE) {
			System.out.println(-1);
		}else{
			System.out.println(ans);
		}
	
	public static void bfs (int y, int x) {

		Queue<Place> q = new LinkedList<>();

		q.add(new Place(y, x, 1, 0)); //y좌표, x좌표, 이동거리, 공사횟수
		visit[y][x] = 0; 처음 공사횟수

		while(!q.isEmpty()) {
			
			Place p = q.poll(); //q(Queue)에서 데이터 꺼내와 p에 담음
		
		//도착지점 만나면 종료
		if(p.y == N-1 && p.x == M-1) {
			ans = p.dis;
			break;
		}

		for (int i = 0; i < 4; i++){
			int ny = p.y + dy[i];
			int nx = p.x + dx[i];

			if(ny < 0 || nx < 0 || ny >= N || nx >= M) {
				continue;
			}
			if(visit[ny][nx] <= p.drill) {
				continue;
			}
			if(map[ny][nx] ==0){ //벽이 아닐 때
				visit[ny][nx] = p.drill;
				q.add(new Place(ny, nx, p.dis+1, p.drill));
			} else { //벽일때
				if(p.drill == 0) {
					visit[ny][nx] = p.drill + 1;
					q.add(new Place(ny, nx, p.dis+1, p.drill+1));
				}
			}
		}
	}	
}
}

		
		

